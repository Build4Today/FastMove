import AsyncStorage from "@react-native-async-storage/async-storage";
import { Decision } from "../types/decision.type";
import { LocalStorageKeys } from "../types/storage-keys.type";

export const saveDecision = async (decision: Decision): Promise<void> => {
  try {
    const existingDecisions = await getDecisions();
    const updatedDecisions = [...existingDecisions, decision];
    await AsyncStorage.setItem(LocalStorageKeys.DECISION, JSON.stringify(updatedDecisions));
  } catch (error) {
    console.error("Error saving decision:", error);
    throw new Error("An error occurred while saving the decision.");
  }
};

export const getDecisions = async (): Promise<Decision[]> => {
  try {
    const decisionsString = await AsyncStorage.getItem(LocalStorageKeys.DECISION);
    return decisionsString ? JSON.parse(decisionsString) : [];
  } catch (error) {
    console.error("Error retrieving decisions:", error);
    throw new Error("An error occurred while retrieving the decisions.");
  }
};

export const searchDecisions = async (searchText: string): Promise<Decision[]> => {
  try {
    const decisions = await getDecisions();
    const lowerCaseSearchText = searchText.toLowerCase();
    return decisions.filter((decision) => {
      const { autoGeneratedAiTitle, tags } = decision;
      return (
        autoGeneratedAiTitle.toLowerCase().includes(lowerCaseSearchText) ||
        (typeof tags === "string" && tags.toLowerCase().includes(lowerCaseSearchText))
      );
    });
  } catch (error) {
    console.error("Error searching decisions:", error);
    throw new Error("An error occurred while searching for decisions.");
  }
};

export const deleteDecision = async (decisionId: string): Promise<void> => {
  try {
    const existingDecisions = await getDecisions();
    const updatedDecisions = existingDecisions.filter((decision) => decision.id !== decisionId);
    await AsyncStorage.setItem(LocalStorageKeys.DECISION, JSON.stringify(updatedDecisions));
  } catch (error) {
    console.error("Error deleting decision:", error);
    throw new Error("An error occurred while deleting the decision.");
  }
};

export const updateDecision = async (updatedDecision: Decision): Promise<void> => {
  try {
    const existingDecisions = await getDecisions();
    const updatedDecisions = existingDecisions.map((decision) =>
      decision.id === updatedDecision.id ? updatedDecision : decision
    );
    await AsyncStorage.setItem(LocalStorageKeys.DECISION, JSON.stringify(updatedDecisions));
  } catch (error) {
    console.error("Error updating decision:", error);
    throw new Error("An error occurred while updating the decision.");
  }
};
