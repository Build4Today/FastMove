import React, { useLayoutEffect, useState } from "react";
import {
  TextArea,
  Box,
  Flex,
  Text,
  VStack,
  Heading,
  Divider,
  Button,
  useToast,
  Input,
  ScrollView,
  Spinner,
  IconButton,
  Icon,
} from "native-base";
import { useNavigation } from "@react-navigation/native";
import { MaterialIcons } from "@expo/vector-icons";

import { makeDecision } from "../services/ai-api.service";
import { saveDecision } from "../services/decision.service";
import { Decision } from "../types/decision.type";
import { ScreenName } from "../types/navigation.type";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { LocalStorageKeys } from "../types/localStorageKeys";

export const DecisionDetailsScreen: React.FC = () => {
  const [decisionA, setDecisionA] = useState<string>("");
  const [decisionB, setDecisionB] = useState<string>("");
  const [finalDecision, setFinalDecision] = useState<number>(0);
  const [tags, setTags] = useState<string[]>([]);
  const [autoGeneratedAiTitle, setAutoGeneratedAiTitle] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [userNeeds, setUserNeeds] = useState<string>("");

  const toast = useToast();
  const navigation = useNavigation();

  useLayoutEffect(() => {
    navigation.setOptions({
      headerLeft: () => (
        <IconButton
          icon={<Icon as={MaterialIcons} name="more-vert" />}
          onPress={() => navigation.navigate(ScreenName.TELL_ABOUT_YOURSELF as never)}
          variant="unstyled"
          rounded={50}
          size="lg"
        />
      ),
    });
  }, [navigation]);

  const handleReset = () => {
    setDecisionA("");
    setDecisionB("");
    setIsLoading(false);
    setFinalDecision(0);
    setTags([]);
    setAutoGeneratedAiTitle("");
    setUserNeeds("");
  };

  const handleSubmit = async () => {
    if (!decisionA || !decisionB) {
      toast.show({
        title: "Decision Fields Missing",
        description: "Please fill in Decision A & Decision B",
        duration: 3000,
      });
      return;
    }

    try {
      // activate the loading spinner
      setIsLoading(true);

      const userDetails = (await AsyncStorage.getItem(LocalStorageKeys.ABOUT_YOURSELF)) || "";

      const response = await makeDecision(decisionA, decisionB, userDetails, userNeeds);
      setFinalDecision(response.finalDecision);
      setTags(response.tags);
      setAutoGeneratedAiTitle(response.autoGeneratedTitle);

      const decisionData: Decision = {
        decisionA,
        decisionB,
        finalDecision: response.finalDecision,
        tags: response.tags.join(", "),
        autoGeneratedAiTitle: response.autoGeneratedTitle,
        userDetails,
        userNeeds,
      };

      // TODO Show response.finalDecision on a friendly modal

      saveDecision(decisionData);

      toast.show({
        title: "Decision Submitted",
        description: "Your decision has been successfully submitted.",
        duration: 3000,
      });
    } catch (error) {
      toast.show({
        title: "Error",
        description: "An error occurred while making the decision.",
        duration: 3000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ScrollView>
      <Flex p={4} backgroundColor="white">
        <VStack space={6}>
          <Heading fontSize="2xl" mb={4}>
            Make a Decision
          </Heading>

          <Box mb={4}>
            <Text fontSize="xl" fontWeight="bold" mb={2} color="blue.500">
              OPTIONAL. Your Needs
            </Text>
            <Input
              value={userNeeds}
              onChangeText={setUserNeeds}
              placeholder="What are your needs?"
              backgroundColor="white"
              borderWidth={2}
              borderColor="gray.300"
              rounded="md"
              p={3}
              accessibilityLabel="User needs input"
              accessibilityHint="Eventual needs for your decisions"
            />
          </Box>

          <Box mb={4}>
            <Text fontSize="xl" fontWeight="bold" mb={2} color="blue.500">
              Decision A
            </Text>
            <TextArea
              value={decisionA}
              onChangeText={setDecisionA}
              placeholder="Enter Decision A"
              backgroundColor="white"
              borderWidth={2}
              borderColor="gray.300"
              rounded="md"
              p={3}
              minHeight={100}
              autoCompleteType=""
              accessibilityLabel="Decision A input"
              accessibilityHint="Enter decision option A"
            />
          </Box>

          <Box mb={4}>
            <Text fontSize="xl" fontWeight="bold" mb={2} color="blue.500">
              Decision B
            </Text>
            <TextArea
              value={decisionB}
              onChangeText={setDecisionB}
              placeholder="Enter Decision B"
              backgroundColor="white"
              borderWidth={2}
              borderColor="gray.300"
              rounded="md"
              p={3}
              minHeight={100}
              autoCompleteType=""
              accessibilityLabel="Decision B input"
              accessibilityHint="Enter decision option B"
            />
          </Box>

          <Button onPress={handleSubmit} colorScheme="blue" isDisabled={isLoading} mt={4} mb={4} size="lg">
            {isLoading ? <Spinner color="white" /> : "Choose"}
          </Button>

          <Button onPress={handleReset} colorScheme="red" mt={4} mb={4} size="lg">
            Reset
          </Button>

          <Divider my={6} />

          {finalDecision !== 0 && (
            <VStack space={4}>
              <Text fontSize="lg" fontWeight="bold">
                Final Decision:
              </Text>
              <Text fontSize="lg">{finalDecision === 1 ? "Decision A" : "Decision B"}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Tags:
              </Text>
              <Text fontSize="lg">{tags.join(", ")}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Auto-generated Title:
              </Text>
              <Text fontSize="lg">{autoGeneratedAiTitle}</Text>
            </VStack>
          )}

          <Button onPress={() => navigation.navigate(ScreenName.DECISION_HISTORY as never)} colorScheme="blue" mt={4}>
            View Decision History
          </Button>
        </VStack>
      </Flex>
    </ScrollView>
  );
};
