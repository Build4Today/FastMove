import React, { useState } from "react";
import {
  TextArea,
  Box,
  Flex,
  Text,
  VStack,
  Heading,
  Divider,
  Button,
  useToast,
  Input,
  ScrollView,
  Spinner,
} from "native-base";
import * as ImagePicker from "expo-image-picker";
import { makeDecision } from "../services/ai-api.service";
import { saveDecision } from "../services/decision.service";
import { Decision } from "../types/decision.type";
import { useNavigation } from "@react-navigation/native";
import { ScreenName } from "../types/navigation.type";
import { Camera } from 'expo-camera';
import * as ImageManipulator from 'expo-image-manipulator';
import { recogniseText } from 'react-native-ml-kit';

export const DecisionDetailsScreen: React.FC = () => {
  const [decisionA, setDecisionA] = useState<string>("");
  const [decisionB, setDecisionB] = useState<string>("");
  const [finalDecision, setFinalDecision] = useState<number>(0);
  const [tags, setTags] = useState<string[]>([]);
  const [autoGeneratedAiTitle, setAutoGeneratedAiTitle] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [userDetails, setUserDetails] = useState<string>("");
  const [userNeeds, setUserNeeds] = useState<string>("");
  const toast = useToast();
  const navigation = useNavigation();

  const handleOCR = async (field: "decisionA" | "decisionB") => {
    try {
      const { status } = await Camera.requestCameraPermissionsAsync();
      if (status !== "granted") {
        toast.show({
          title: "Camera permission denied",
          description: "Please grant camera permission to use OCR.",
          duration: 3000,
          isClosable: true,
        });
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        quality: 1,
        base64: true,
      });

      if (!result.cancelled && result.uri) {
        const manipulatedImage = await ImageManipulator.manipulateAsync(
          result.uri,
          [],
          { base64: true }
        );
        
        const textRecognitionResult = await recogniseText(manipulatedImage.base64);
        const recognisedText = textRecognitionResult.blocks.map(block => block.text).join(' ');

        if (field === "decisionA") {
          setDecisionA(recognisedText);
        } else {
          setDecisionB(recognisedText);
        }
      }
    } catch (error) {
      console.error("OCR Error:", error);
      toast.show({
        title: "OCR Error",
        description: "An error occurred while performing OCR.",
        duration: 3000,
      });
    }
  };

  const handleSubmit = async () => {
    if (!decisionA || !decisionB || !userDetails || !userNeeds) {
      toast.show({
        title: "Missing Fields",
        description: "Please fill in all fields before submitting.",
        duration: 3000,
      });
      return;
    }

    setIsLoading(true);

    try {
      const response = await makeDecision(decisionA, decisionB, userDetails, userNeeds);
      setFinalDecision(response.finalDecision);
      setTags(response.tags);
      setAutoGeneratedAiTitle(response.autoGeneratedTitle);

      const decisionData: Decision = {
        decisionA,
        decisionB,
        finalDecision: response.finalDecision,
        tags: response.tags.join(", "),
        autoGeneratedAiTitle: response.autoGeneratedAiTitle,
        userDetails,
        userNeeds,
      };

      await saveDecision(decisionData);

      toast.show({
        title: "Decision Submitted",
        description: "Your decision has been successfully submitted.",
        duration: 3000,
      });
    } catch (error) {
      console.error("Error:", error);
      toast.show({
        title: "Submission Error",
        description: "An error occurred while submitting the decision.",
        duration: 3000,
      });
    }

    setIsLoading(false);
  };

  return (
    <ScrollView>
      <Flex p={4} backgroundColor="white">
        <VStack space={4}>
          <Heading fontSize="2xl" mb={4}>
            Make a Decision
          </Heading>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              About Yourself
            </Text>
            <Input
              value={userDetails}
              onChangeText={setUserDetails}
              placeholder="Tell us about yourself"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              accessibilityLabel="User details input"
              accessibilityHint="Enter details about yourself"
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Your Needs
            </Text>
            <Input
              value={userNeeds}
              onChangeText={setUserNeeds}
              placeholder="What are your needs?"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              accessibilityLabel="User needs input"
              accessibilityHint="Enter your needs"
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Decision A
            </Text>
            <TextArea
              value={decisionA}
              onChangeText={setDecisionA}
              placeholder="Enter Decision A"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              minHeight={100}
              autoCompleteType=""
              accessibilityLabel="Decision A input"
              accessibilityHint="Enter decision option A"
            />
            <Button onPress={() => handleOCR("decisionA")} colorScheme="blue" mt={2}>
              Scan Decision A (OCR)
            </Button>
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Decision B
            </Text>
            <TextArea
              value={decisionB}
              onChangeText={setDecisionB}
              placeholder="Enter Decision B"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              minHeight={100}
              autoCompleteType=""
              accessibilityLabel="Decision B input"
              accessibilityHint="Enter decision option B"
            />
            <Button onPress={() => handleOCR("decisionB")} colorScheme="blue" mt={2}>
              Scan Decision B (OCR)
            </Button>
          </Box>

          <Button onPress={handleSubmit} colorScheme="green" isDisabled={isLoading}>
            {isLoading ? <Spinner color="white" /> : "Submit"}
          </Button>

          <Divider my={6} />

          {finalDecision !== 0 && (
            <VStack space={4}>
              <Text fontSize="lg" fontWeight="bold">
                Final Decision:
              </Text>
              <Text fontSize="lg">{finalDecision === 1 ? "Decision A" : "Decision B"}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Tags:
              </Text>
              <Text fontSize="lg">{tags.join(", ")}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Auto-generated Title:
              </Text>
              <Text fontSize="lg">{autoGeneratedAiTitle}</Text>
            </VStack>
          )}

          <Button onPress={() => navigation.navigate(ScreenName.DECISION_HISTORY)} colorScheme="blue" mt={4}>
            View Decision History
          </Button>
        </VStack>
      </Flex>
    </ScrollView>
  );
};
