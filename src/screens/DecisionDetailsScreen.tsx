import React, { useState, useRef } from "react";
import { TextInput } from "react-native";
import { Box, Flex, Text, VStack, Heading, Divider, Button, useToast, Input, ScrollView, TextArea } from "native-base";
import { Camera } from "expo-camera";
import * as TextRecognition from "expo-text-recognition";
import { makeDecision } from "../services/ai-api.service";
import { saveDecision } from "../services/decision.service";
import { Decision } from "../types/decision.type";
import { useNavigation } from "@react-navigation/native";

export const DecisionDetailsScreen: React.FC = () => {
  const [decisionA, setDecisionA] = useState<string>("");
  const [decisionB, setDecisionB] = useState<string>("");
  const [finalDecision, setFinalDecision] = useState<number>(0);
  const [tags, setTags] = useState<string[]>([]);
  const [autoGeneratedAiTitle, setAutoGeneratedAiTitle] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [userDetails, setUserDetails] = useState<string>("");
  const [userNeeds, setUserNeeds] = useState<string>("");
  const toast = useToast();
  const navigation = useNavigation();
  const cameraRef = useRef<Camera>(null);

  const handleOCR = async () => {
    try {
      const { status } = await Camera.requestCameraPermissionsAsync();
      if (status !== "granted") {
        throw new Error("Camera permission not granted");
      }

      if (cameraRef.current) {
        const { base64 } = await cameraRef.current.takePictureAsync({
          quality: 1,
          base64: true,
        });

        if (base64) {
          const { text } = await TextRecognition.recognizeText(base64);
          setDecisionA(text);
        }
      }
    } catch (error) {
      console.error("OCR Error:", error);
      toast.show({ title: "OCR Error", status: "error" });
    }
  };

  const handleSubmit = async () => {
    if (!decisionA || !decisionB || !userDetails || !userNeeds) {
      toast.show({ title: "Please fill in all fields", status: "warning" });
      return;
    }

    setIsLoading(true);

    try {
      const response = await makeDecision(decisionA, decisionB, userDetails, userNeeds);
      setFinalDecision(response.finalDecision);
      setTags(response.tags);
      setAutoGeneratedAiTitle(response.autoGeneratedTitle);

      const decisionData: Decision = {
        decisionA,
        decisionB,
        finalDecision: response.finalDecision,
        tags: response.tags.join(", "),
        autoGeneratedAiTitle: response.autoGeneratedTitle,
        userDetails,
        userNeeds,
      };

      await saveDecision(decisionData);

      toast.show({ title: "Decision submitted successfully", status: "success" });
    } catch (error) {
      console.error("Error:", error);
      toast.show({ title: "Error submitting decision", status: "error" });
    }

    setIsLoading(false);
  };

  return (
    <ScrollView>
      <Flex p={4} backgroundColor="white">
        <VStack space={4}>
          <Heading fontSize="2xl" mb={4}>
            Make a Decision
          </Heading>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              About Yourself
            </Text>
            <Input
              value={userDetails}
              onChangeText={setUserDetails}
              placeholder="Tell us about yourself"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Your Needs
            </Text>
            <Input
              value={userNeeds}
              onChangeText={setUserNeeds}
              placeholder="What are your needs?"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Decision A
            </Text>
            <TextArea
              value={decisionA}
              onChangeText={setDecisionA}
              placeholder="Enter Decision A"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              minHeight={100}
              autoCompleteType=""
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Decision B
            </Text>
            <TextArea
              value={decisionB}
              onChangeText={setDecisionB}
              placeholder="Enter Decision B"
              backgroundColor="white"
              borderWidth={1}
              borderColor="gray.300"
              rounded="md"
              p={2}
              minHeight={100}
              autoCompleteType=""
            />
          </Box>

          <Box>
            <Text fontSize="lg" fontWeight="bold" mb={1}>
              Scan Decision A
            </Text>
            <Camera ref={cameraRef} style={{ flex: 1, aspectRatio: 1 }} />
            <Button onPress={handleOCR} colorScheme="blue" mt={2}>
              Scan Text (OCR)
            </Button>
          </Box>

          <Button onPress={handleSubmit} isLoading={isLoading} colorScheme="green">
            Submit
          </Button>

          <Divider my={6} />

          {finalDecision !== 0 && (
            <VStack space={4}>
              <Text fontSize="lg" fontWeight="bold">
                Final Decision:
              </Text>
              <Text fontSize="lg">{finalDecision === 1 ? "Decision A" : "Decision B"}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Tags:
              </Text>
              <Text fontSize="lg">{tags.join(", ")}</Text>

              <Text fontSize="lg" fontWeight="bold">
                Auto-generated Title:
              </Text>
              <Text fontSize="lg">{autoGeneratedAiTitle}</Text>
            </VStack>
          )}

          <Button onPress={() => navigation.navigate("DecisionHistory")} colorScheme="blue" mt={4}>
            View Decision History
          </Button>
        </VStack>
      </Flex>
    </ScrollView>
  );
};
