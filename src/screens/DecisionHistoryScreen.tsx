import React, { useEffect, useState, useCallback } from "react";
import { FlatList, Input, Icon, Text, VStack, Heading, Spinner, Button, AlertDialog } from "native-base";
import { Ionicons } from "@expo/vector-icons";
import { deleteDecision, getDecisions } from "../services/decision.service";
import { Decision } from "../types/decision.type";
import { Box } from "native-base";

export const DecisionHistoryScreen: React.FC = () => {
  const [decisions, setDecisions] = useState<Decision[]>([]);
  const [searchText, setSearchText] = useState<string>("");
  const [filteredDecisions, setFilteredDecisions] = useState<Decision[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isAlertOpen, setIsAlertOpen] = useState<boolean>(false);
  const [decisionToDelete, setDecisionToDelete] = useState<Decision | null>(null);

  const fetchDecisions = useCallback(async () => {
    try {
      const storedDecisions = await getDecisions();
      setDecisions(storedDecisions);
      setIsLoading(false);
    } catch (error) {
      console.error("Error fetching decisions:", error);
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchDecisions();
  }, [fetchDecisions]);

  useEffect(() => {
    filterDecisions();
  }, [searchText, decisions]);

  const filterDecisions = () => {
    const lowerCaseSearchText = searchText.toLowerCase();
    const filtered = decisions.filter((decision) => {
      const { autoGeneratedAiTitle, tags } = decision;
      return (
        autoGeneratedAiTitle.toLowerCase().includes(lowerCaseSearchText) ||
        (typeof tags === 'string' && tags.toLowerCase().includes(lowerCaseSearchText))
      );
    });
    setFilteredDecisions(filtered);
  };

  const removeDecision = async (item: Decision) => {
    if (!item.id) {
      console.error("Decision ID is missing");
      return;
    }

    try {
      await deleteDecision(item.id);
      await fetchDecisions();
    } catch (error) {
      console.error("Error removing decision:", error);
    }
  };

  const handleRemoveDecision = (item: Decision) => {
    setDecisionToDelete(item);
    setIsAlertOpen(true);
  };

  const confirmRemoveDecision = () => {
    if (decisionToDelete) {
      removeDecision(decisionToDelete);
    }
    setIsAlertOpen(false);
  };

  const renderDecisionItem = ({ item }: { item: Decision }) => (
    <Box borderWidth={1} borderColor="gray.300" p={4} my={2} rounded="md" backgroundColor="white">
      <Heading mb={4} color="blue.500">
        {item.autoGeneratedAiTitle}
      </Heading>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        User Details:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.userDetails}
      </Text>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        User Needs:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.userNeeds}
      </Text>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        Decision A:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.decisionA}
      </Text>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        Decision B:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.decisionB}
      </Text>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        Final Decision:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.finalDecision === 1 ? "Decision A" : "Decision B"}
      </Text>

      <Text fontSize="lg" fontWeight="bold" mb={1}>
        Tags:
      </Text>
      <Text fontSize="md" mb={2}>
        {item.tags}
      </Text>

      <Button onPress={() => handleRemoveDecision(item)} colorScheme="red" mt={4}>
        Remove Decision
      </Button>
    </Box>
  );

  return (
    <VStack p={4} backgroundColor="white" flex={1}>
      <Heading fontSize="2xl" mb={4}>
        Decision History
      </Heading>
      <Input
        placeholder="Search decisions..."
        value={searchText}
        onChangeText={(text) => setSearchText(text)}
        backgroundColor="white"
        borderWidth={1}
        borderColor="gray.300"
        rounded="md"
        p={2}
        mb={4}
        InputLeftElement={<Icon as={<Ionicons name="search" />} size={5} ml={2} color="muted.400" />}
        accessibilityLabel="Search decisions"
      />
      {isLoading ? (
        <Spinner size="lg" color="blue.500" />
      ) : (
        <FlatList
          data={filteredDecisions}
          renderItem={renderDecisionItem}
          keyExtractor={(item) => item.id || ''}
          ListEmptyComponent={
            <Text textAlign="center" mt={10} color="gray.500">
              No decisions found.
            </Text>
          }
        />
      )}
      <AlertDialog
        isOpen={isAlertOpen}
        onClose={() => setIsAlertOpen(false)}
        leastDestructiveRef={undefined}
      >
        <AlertDialog.Content>
          <AlertDialog.Header>Delete Decision</AlertDialog.Header>
          <AlertDialog.Body>
            Are you sure you want to delete this decision? This action cannot be undone.
          </AlertDialog.Body>
          <AlertDialog.Footer>
            <Button.Group space={2}>
              <Button variant="unstyled" onPress={() => setIsAlertOpen(false)}>
                Cancel
              </Button>
              <Button colorScheme="danger" onPress={confirmRemoveDecision}>
                Delete
              </Button>
            </Button.Group>
          </AlertDialog.Footer>
        </AlertDialog.Content>
      </AlertDialog>
    </VStack>
  );
};
